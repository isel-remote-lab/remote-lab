services:
  db:
    build:
      context: ./db
      dockerfile: Dockerfile
    container_name: rl-db-${ENV_TYPE:-dev}
    ports:
      - ${DB_PORT:-5432}:5432
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db-${ENV_TYPE:-dev}:/var/lib/postgresql/data
    networks:
      - db-api
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - api
      - full

  api:
    #image: rl-api
    build:
      context: ./api
      dockerfile: docker/Dockerfile
    container_name: rl-api
    env_file:
      - ./private/shared/secrets/.env
    environment:
      - POSTGRES_HOST=db
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db-api
      - api-website-nginx
    ports:
      - ${API_PORT:-8080}:8080
    profiles:
      - api
      - full

  website-prod:
    build:
      dockerfile: website/Dockerfile.${ENV_TYPE:-dev}
      args:
        NEXTAUTH_URL: ${NEXTAUTH_URL}
        AUTH_SECRET: ${AUTH_SECRET}
        AUTH_MICROSOFT_ENTRA_ID_ID: ${AUTH_MICROSOFT_ENTRA_ID_ID}
        AUTH_MICROSOFT_ENTRA_ID_SECRET: ${AUTH_MICROSOFT_ENTRA_ID_SECRET}
        API_KEY: ${API_KEY}
        NEXT_TELEMETRY_DISABLED: 1
    container_name: rl-website-prod
    environment:
      - NEXTAUTH_URL=${NEXTAUTH_URL:-http://localhost}
    env_file:
      - ./private/frontend/.env
      - ./private/shared/secrets/.env
    depends_on:
      - api
    networks:
      - api-website-nginx
    profiles:
      - prod
  
  website-dev:
    extends:
      service: website-prod
    container_name: rl-website-dev
    profiles:
      - dev
    volumes:
      - ${WEBSITE_DEV_FOLDER:-./}src:/app/src
      - ${WEBSITE_DEV_FOLDER:-./}public:/app/public
      - ${WEBSITE_DEV_FOLDER:-./}next.config.js:/app/next.config.js
      - ${WEBSITE_DEV_FOLDER:-./}tsconfig.json:/app/tsconfig.json

  nginx:
    image: ${NGINX_IMAGE:-nginx}
    container_name: rl-nginx
    ports:
      - 80:80
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
      - website-${ENV_TYPE:-dev}
    networks:
      - api-website-nginx
      - nginx-cloudflare
    profiles:
      - full

  cloudflared:
    image: cloudflare/cloudflared
    container_name: rl-cloudflared
    command: tunnel run
    environment:
      - TUNNEL_TOKEN=${CLOUDFLARE_TUNNEL_TOKEN}
    networks:
      - nginx-cloudflare
    depends_on:
      - nginx
    profiles:
      - prod
      - cloudflare

networks:
  db-api:
  api-website-nginx:
  nginx-cloudflare:

volumes:
  db-dev:
  db-prod: