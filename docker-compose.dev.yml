services:
  db:
    build:
      context: ./db
      dockerfile: Dockerfile.dev
    container_name: rl-db-dev
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db:/var/lib/postgresql/data
    networks:
      - db-api
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    image: rl-jvm
    container_name: rl-api-dev
    env_file:
      - ./private/shared/secrets/.env
    environment:
      - POSTGRES_HOST=db
      - NEXTAUTH_URL=${NGROK_URL}
    depends_on:
      db:
        condition: service_healthy
    networks:
      - db-api
      - api-website

  website:
    build:
      context: ./website
      dockerfile: Dockerfile.dev
    container_name: rl-website-dev
    env_file:
      - ./private/frontend/.env.local
      - ./private/shared/secrets/.env
    volumes:
      - ./website:/app
      - /app/node_modules # To preserve the node_modules folder
    depends_on:
      - api
    networks:
      - api-website
    restart: unless-stopped
  
  nginx:
    image: nginx
    container_name: rl-nginx
    ports:
      - 80:80
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - api
      - website
    networks:
      - api-website
      - ngrok
    restart: always

  ngrok:
    image: ngrok/ngrok
    container_name: rl-ngrok
    command:
      - http
      - --url=${NGROK_URL}
      - http://nginx:80
    environment:
      NGROK_AUTHTOKEN: ${NGROK_AUTHTOKEN}
    ports:
      - 4040:4040
    networks:
      - ngrok
    depends_on:
      - nginx
    restart: unless-stopped

networks:
  db-api:
  api-website:
  ngrok:
volumes:
  db: